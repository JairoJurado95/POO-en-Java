{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a Programa con Jairo!","text":"<p>Espero ayudarte a poder comenzar con la programaci\u00f3n y guiarte en tus primeros pasos.</p>"},{"location":"#editor-de-codigo","title":"Editor de codigo","text":"<p>En mi opinion, ya que es el que he estado utilizando, el Viusla Studio code funciona a la maravilla para empezar a aprender con Java. Tambien podemos descargar IntelliJ IDEA es otra gran herramienta.</p>"},{"location":"#enlaces-de-descarga","title":"Enlaces de descarga","text":"<p>Visual Studio Code</p> <p>IntelliJ IDEA</p>"},{"location":"atributos/","title":"Atributos en Java","text":"<p>Los atributos en Java son variables que pertenecen a una clase y determinan su estado. Se definen dentro de la clase y pueden tener diferentes modificadores de acceso.</p>"},{"location":"atributos/#modificadores-de-acceso","title":"Modificadores de Acceso","text":"<p>Los modificadores de acceso determinan la visibilidad de los atributos dentro y fuera de la clase.</p> Modificador Descripci\u00f3n <code>public</code> El atributo es accesible desde cualquier otra clase. <code>private</code> El atributo solo es accesible dentro de la misma clase. <code>protected</code> El atributo es accesible dentro de la misma clase, subclases y clases del mismo paquete. (Sin modificador) Tambi\u00e9n conocido como package-private, el atributo es accesible solo dentro del mismo paquete."},{"location":"atributos/#ejemplo-de-atributos-en-java","title":"Ejemplo de Atributos en Java","text":"<pre><code>public class Persona {\n    public String nombre;    // Visible en cualquier parte\n    private int edad;        // Solo accesible dentro de esta clase\n    protected String genero; // Accesible dentro del paquete y subclases\n    String direccion;        // Package-private (sin modificador de acceso)\n}\n</code></pre>"},{"location":"atributos/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ul> <li>Es recomendable mantener los atributos privados y utilizar m\u00e9todos getter y setter para acceder y modificar su valor.</li> <li>Utilizar <code>final</code> si el atributo no debe cambiar despu\u00e9s de su inicializaci\u00f3n.</li> </ul>"},{"location":"atributos/#ejemplo-con-getters-y-setters","title":"Ejemplo con Getters y Setters","text":"<pre><code>public class Persona {\n    private String nombre;\n\n    // Getter\n    public String getNombre() {\n        return nombre;\n    }\n\n    // Setter\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n}\n</code></pre> <p>Cuidado</p> <p>Recuerda que si los atributos son privados para acceder a ellos o modificarlos precisaras de estos Getters y Setters como hemos mencionado anteriormente.</p>"},{"location":"clases/","title":"Clases en Java","text":"<p>En Java, una clase es una plantilla para crear objetos. Define atributos y m\u00e9todos que los objetos pueden utilizar.</p>"},{"location":"clases/#definicion-de-una-clase","title":"Definici\u00f3n de una Clase","text":"<p>Aqu\u00ed tienes un ejemplo simple de una clase <code>Persona</code> en Java:</p> <pre><code>class Persona {\n    // Atributos de la clase\n    String nombre;\n    int edad;\n\n    // Constructor\n    Persona(String nombre, int edad) {\n        this.nombre = nombre;\n        this.edad = edad;\n    }\n\n    // M\u00e9todo para mostrar informaci\u00f3n\n    void mostrarInformacion() {\n        System.out.println(\"Nombre: \" + nombre + \", Edad: \" + edad);\n    }\n}\n</code></pre>"},{"location":"clases/#creacion-de-un-objeto","title":"Creaci\u00f3n de un Objeto","text":"<p>Para crear un objeto de la clase <code>Persona</code>, hacemos lo siguiente:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        Persona persona1 = new Persona(\"Carlos\", 30);\n        persona1.mostrarInformacion();\n    }\n}\n</code></pre> <p>Consejo</p> <p>Recuerda que en Java, cada clase debe guardarse en un archivo con el mismo nombre de la clase y la extensi\u00f3n <code>.java</code>.</p> <p>Este c\u00f3digo imprimir\u00e1:</p> <pre><code>Nombre: Carlos, Edad: 30\n</code></pre> <p>As\u00ed es como se define y usa una clase en Java.</p>"},{"location":"enums/","title":"Enums en Java","text":"<p>Los enums (o enumeraciones) en Java son un tipo especial de clase que representa un conjunto de constantes. Facilitan la creaci\u00f3n de variables que pueden tomar un n\u00famero limitado de valores predefinidos, mejorando la legibilidad y la seguridad del c\u00f3digo.</p>"},{"location":"enums/#definicion-de-enums","title":"Definici\u00f3n de Enums","text":"<p>En Java, un enum se define utilizando la palabra clave <code>enum</code>. Cada valor en un enum es una instancia de la clase enum.</p>"},{"location":"enums/#sintaxis","title":"Sintaxis:","text":"<pre><code>enum Dia {\n    LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO\n}\n</code></pre>"},{"location":"enums/#caracteristicas-de-los-enums-en-java","title":"Caracter\u00edsticas de los Enums en Java","text":"Caracter\u00edsticas Descripci\u00f3n Tipo Seguro Los enums proporcionan un tipo seguro, evitando valores no v\u00e1lidos. M\u00e9todos Los enums pueden tener m\u00e9todos, atributos y contructores. Comparaci\u00f3n Se pueden comparar usando == y equals(). <p>Cuidado</p> <p>Los enums son finales por defecto, lo que significa que no se pueden extender.</p>"},{"location":"enums/#ejemplo-de-enums-en-java","title":"Ejemplo de Enums en Java","text":"<pre><code>enum Color {\n    ROJO, VERDE, AZUL;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Color miColor = Color.ROJO;\n\n        switch (miColor) {\n            case ROJO:\n                System.out.println(\"El color es rojo.\");\n                break;\n            case VERDE:\n                System.out.println(\"El color es verde.\");\n                break;\n            case AZUL:\n                System.out.println(\"El color es azul.\");\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"enums/#metodos-en-enums","title":"Metodos en Enums","text":"<p>Los enums pueden tener m\u00e9todos personalizados. Por ejemplo, podemos agregar un m\u00e9todo que devuelva una descripci\u00f3n del color.</p> <p>Ejemplo:</p> <pre><code>enum Color {\n    ROJO(\"Color del fuego\"),\n    VERDE(\"Color de la naturaleza\"),\n    AZUL(\"Color del cielo\");\n\n    private String descripcion;\n\n    Color(String descripcion) {\n        this.descripcion = descripcion;\n    }\n\n    public String getDescripcion() {\n        return descripcion;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        for (Color color : Color.values()) {\n            System.out.println(color + \": \" + color.getDescripcion());\n        }\n    }\n}\n</code></pre>"},{"location":"enums/#beneficios-de-los-enums","title":"Beneficios de los Enums","text":"<ol> <li>Legibilidad: Mejora la claridad del c\u00f3digo al usar nombres significativos. </li> <li>Seguridad: Reduce errores al restringir los valores posibles. </li> <li>Mantenibilidad: Facilita la modificaci\u00f3n de conjuntos de constantes.</li> </ol> <p>Los enums son una caracter\u00edstica poderosa en Java que ayuda a crear c\u00f3digo m\u00e1s limpio y menos propenso a errores, especialmente en situaciones donde se manejan un conjunto limitado de valores.</p>"},{"location":"excepciones/","title":"Excepciones en Java","text":"<p>Las excepciones en Java son eventos que ocurren durante la ejecuci\u00f3n de un programa y que interrumpen el flujo normal de las instrucciones. Java proporciona un mecanismo robusto para manejar estas situaciones, permitiendo a los desarrolladores gestionar errores de manera controlada.</p>"},{"location":"excepciones/#definicion-de-excepciones","title":"Definici\u00f3n de Excepciones","text":"<p>Una excepci\u00f3n es un objeto que representa un error o una condici\u00f3n excepcional que ocurre en un programa. Las excepciones pueden ser generadas por el propio programa o por el entorno de ejecuci\u00f3n.</p>"},{"location":"excepciones/#sintaxis","title":"Sintaxis:","text":"<pre><code>try {\n    // C\u00f3digo que puede lanzar una excepci\u00f3n\n} catch (TipoDeExcepcion e) {\n    // Manejo de la excepci\u00f3n\n} finally {\n    // C\u00f3digo que se ejecuta siempre, haya o no una excepci\u00f3n\n}\n</code></pre>"},{"location":"excepciones/#tipos-de-excepciones-en-java","title":"Tipos de Excepciones en Java","text":"Tipo de Excepci\u00f3n Descripci\u00f3n Excepciones Comprobadas Deben ser declaradas en la firma del m\u00e9todo o manejadas con un bloque try-catch. Ejemplo: IOException. Excepciones No Comprobadas No necesitan ser declaradas ni manejadas. Ejemplo: NullPointerException. Errores Representan condiciones serias que no se pueden manejar. Ejemplo: OutOfMemoryError. <p>Cuidado</p> <p>Las excepciones comprobadas son aquellas que el compilador obliga a manejar, mientras que las no comprobadas son aquellas que pueden ocurrir en tiempo de ejecuci\u00f3n.</p>"},{"location":"excepciones/#ejemplo-de-manejo-de-excepciones-en-java","title":"Ejemplo de Manejo de Excepciones en Java","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        try {\n            int resultado = 10 / 0; // Esto lanzar\u00e1 una ArithmeticException\n        } catch (ArithmeticException e) {\n            System.out.println(\"Error: Divisi\u00f3n por cero.\");\n        } finally {\n            System.out.println(\"Este bloque se ejecuta siempre.\");\n        }\n    }\n}\n</code></pre>"},{"location":"excepciones/#creacion-de-excepciones-personalizadas","title":"Creaci\u00f3n de Excepciones Personalizadas","text":"<p>Puedes crear tus propias excepciones extendiendo la clase Exception o RuntimeException.</p> <p>Ejemplo:</p> <pre><code>class MiExcepcion extends Exception {\n    public MiExcepcion(String mensaje) {\n        super(mensaje);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            throw new MiExcepcion(\"Esta es una excepci\u00f3n personalizada.\");\n        } catch (MiExcepcion e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"excepciones/#beneficios-del-manejo-de-excepciones","title":"Beneficios del Manejo de Excepciones","text":"<ul> <li>Control de Errores: Permite manejar errores de manera controlada y predecible. </li> <li>Separaci\u00f3n de C\u00f3digo: Facilita la separaci\u00f3n del c\u00f3digo de manejo de errores del c\u00f3digo de l\u00f3gica de negocio.</li> <li>Mejor Mantenibilidad: Mejora la legibilidad y mantenibilidad del c\u00f3digo al centralizar el manejo de errores.</li> </ul> <p>El manejo de excepciones es una parte esencial de la Programaci\u00f3n Orientada a Objetos (POO) en Java, permitiendo a los desarrolladores crear aplicaciones m\u00e1s robustas y resilientes frente a errores.</p>"},{"location":"faq/","title":"Preguntas Frecuentes (FAQ) sobre Programaci\u00f3n","text":""},{"location":"faq/#1-que-es-la-programacion","title":"1. \u00bfQu\u00e9 es la programaci\u00f3n?","text":"<p>La programaci\u00f3n es el proceso de dise\u00f1ar y construir un conjunto de instrucciones que le dicen a una computadora c\u00f3mo realizar una tarea. Esto se hace utilizando lenguajes de programaci\u00f3n, que son conjuntos de reglas y sintaxis que permiten a los programadores escribir c\u00f3digo.</p>"},{"location":"faq/#2-cuales-son-los-lenguajes-de-programacion-mas-populares","title":"2. \u00bfCu\u00e1les son los lenguajes de programaci\u00f3n m\u00e1s populares?","text":"<p>Algunos de los lenguajes de programaci\u00f3n m\u00e1s populares incluyen:</p> <ol> <li>Python: Conocido por su simplicidad y versatilidad.</li> <li>Java: Ampliamente utilizado en aplicaciones empresariales y desarrollo de Android.</li> <li>JavaScript: Principalmente utilizado para el desarrollo web.</li> <li>C#: Utilizado en el desarrollo de aplicaciones de Windows y videojuegos.</li> <li>C++: Conocido por su rendimiento y control sobre los recursos del sistema.</li> </ol>"},{"location":"faq/#3-que-es-un-algoritmo","title":"3. \u00bfQu\u00e9 es un algoritmo?","text":"<p>Un algoritmo es un conjunto de pasos o instrucciones que se siguen para resolver un problema o realizar una tarea espec\u00edfica. Los algoritmos son fundamentales en la programaci\u00f3n, ya que definen la l\u00f3gica que se implementar\u00e1 en el c\u00f3digo.</p>"},{"location":"faq/#4-que-es-la-programacion-orientada-a-objetos-poo","title":"4. \u00bfQu\u00e9 es la programaci\u00f3n orientada a objetos (POO)?","text":"<p>La programaci\u00f3n orientada a objetos es un paradigma de programaci\u00f3n que utiliza \"objetos\" para representar datos y m\u00e9todos. Los conceptos clave de la POO incluyen:</p> <ul> <li>Clases: Plantillas para crear objetos.</li> <li>Objetos: Instancias de clases.</li> <li>Herencia: Mecanismo que permite a una clase heredar propiedades y comportamientos de otra clase.</li> <li>Polimorfismo: Capacidad de un objeto para tomar muchas formas.</li> <li>Encapsulamiento: Ocultaci\u00f3n de los detalles internos de un objeto.</li> </ul>"},{"location":"faq/#5-que-es-una-excepcion-en-programacion","title":"5. \u00bfQu\u00e9 es una excepci\u00f3n en programaci\u00f3n?","text":"<p>Una excepci\u00f3n es un evento que ocurre durante la ejecuci\u00f3n de un programa que interrumpe su flujo normal. Las excepciones pueden ser manejadas mediante bloques de c\u00f3digo que permiten al programador responder a errores de manera controlada.</p>"},{"location":"faq/#6-que-es-un-framework","title":"6. \u00bfQu\u00e9 es un framework?","text":"<p>Un framework es una plataforma que proporciona una base sobre la cual se puede desarrollar software. Incluye bibliotecas, herramientas y convenciones que facilitan el desarrollo de aplicaciones. Ejemplos de frameworks incluyen:</p> <ul> <li>Spring para Java.</li> <li>Django para Python.</li> <li>React para JavaScript.</li> </ul>"},{"location":"faq/#7-que-es-el-control-de-versiones","title":"7. \u00bfQu\u00e9 es el control de versiones?","text":"<p>El control de versiones es un sistema que registra los cambios realizados en un archivo o conjunto de archivos a lo largo del tiempo. Permite a los desarrolladores colaborar en proyectos, realizar un seguimiento de los cambios y revertir a versiones anteriores si es necesario. Git es uno de los sistemas de control de versiones m\u00e1s populares.</p>"},{"location":"faq/#8-que-es-la-depuracion","title":"8. \u00bfQu\u00e9 es la depuraci\u00f3n?","text":"<p>La depuraci\u00f3n es el proceso de identificar y corregir errores o \"bugs\" en el c\u00f3digo. Los programadores utilizan herramientas de depuraci\u00f3n y t\u00e9cnicas para analizar el comportamiento del programa y encontrar la causa de los problemas.</p>"},{"location":"faq/#9-que-es-una-api","title":"9. \u00bfQu\u00e9 es una API?","text":"<p>Una API (Interfaz de Programaci\u00f3n de Aplicaciones) es un conjunto de reglas y protocolos que permite que diferentes aplicaciones se comuniquen entre s\u00ed. Las APIs permiten a los desarrolladores acceder a funcionalidades o datos de otros servicios sin necesidad de conocer su implementaci\u00f3n interna.</p>"},{"location":"faq/#10-como-puedo-mejorar-mis-habilidades-de-programacion","title":"10. \u00bfC\u00f3mo puedo mejorar mis habilidades de programaci\u00f3n?","text":"<p>Para mejorar tus habilidades de programaci\u00f3n, considera lo siguiente:</p> <ol> <li>Practica regularmente resolviendo problemas en plataformas como LeetCode, HackerRank o Codewars.</li> <li>Contribuye a proyectos de c\u00f3digo abierto.</li> <li>Lee libros y documentaci\u00f3n sobre lenguajes y tecnolog\u00edas que te interesen.</li> <li>Participa en comunidades de programaci\u00f3n y foros para aprender de otros.</li> </ol> <p>IMPORTANTE</p> <ul> <li> <p>Guia con las que yo he aprendido a programar en Java en youtube. CLICK AQUI</p> </li> <li> <p>Guia con la que he aprendido a crear esta p\u00e1gina web. CLICK AQUI</p> </li> </ul>"},{"location":"herencia/","title":"Herencia en Java","text":"<p>La herencia es un mecanismo en Java que permite a una clase adquirir las propiedades y comportamientos de otra clase. Facilita la reutilizaci\u00f3n de c\u00f3digo y la creaci\u00f3n de jerarqu\u00edas de clases.</p>"},{"location":"herencia/#definicion-de-herencia","title":"Definici\u00f3n de Herencia","text":"<p>En Java, la herencia se implementa utilizando la palabra clave <code>extends</code>. La clase que hereda se llama subclase y la clase de la que se hereda se llama superclase.</p>"},{"location":"herencia/#sintaxis","title":"Sintaxis:","text":"<pre><code>class SuperClase {\n    // C\u00f3digo de la superclase\n}\n\nclass SubClase extends SuperClase {\n    // C\u00f3digo de la subclase\n}\n</code></pre>"},{"location":"herencia/#tipos-de-herencia-en-java","title":"Tipos de Herencia en Java","text":"Tipo de Herencia Descripci\u00f3n Herencia Simple Una subclase hereda de una sola superclase. Herencia Multinivel Una clase hereda de otra clase, que a su vez hereda de otra clase. Herencia Jer\u00e1rquica Varias subclases heredan de una misma superclase. <p>Cuidado</p> <p>Java no soporta herencia m\u00faltiple (una clase no puede heredar de m\u00e1s de una clase a la vez), pero se puede lograr mediante interfaces.</p>"},{"location":"herencia/#ejemplo-de-herencia-en-java","title":"Ejemplo de Herencia en Java","text":"<pre><code>// Superclase\nclass Animal {\n    String nombre;\n\n    void hacerSonido() {\n        System.out.println(\"Haciendo un sonido...\");\n    }\n}\n\n// Subclase que hereda de Animal\nclass Perro extends Animal {\n\n    void ladrar() {\n        System.out.println(\"Guau Guau!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Perro miPerro = new Perro();\n        miPerro.nombre = \"Firulais\";\n        miPerro.hacerSonido(); // M\u00e9todo heredado de Animal\n        miPerro.ladrar(); // M\u00e9todo propio de Perro\n    }\n}\n</code></pre>"},{"location":"herencia/#uso-de-super","title":"Uso de super","text":"<p>La palabra clave <code>super</code> se usa para: 1. Llamar al constructor de la superclase. 2. Acceder a m\u00e9todos o atributos de la superclase.</p> <p>Ejemplo:</p> <pre><code>class Animal {\n    Animal() {\n        System.out.println(\"Animal creado\");\n    }\n}\n\nclass Perro extends Animal {\n    Perro() {\n        super(); // Llama al constructor de Animal\n        System.out.println(\"Perro creado\");\n    }\n}\n</code></pre>"},{"location":"herencia/#beneficios-de-la-herencia","title":"Beneficios de la Herencia","text":"<p>Reutilizaci\u00f3n de c\u00f3digo: Evita la duplicaci\u00f3n de c\u00f3digo. Mantenibilidad: Facilita modificaciones y mejoras. Organizaci\u00f3n: Permite estructurar el c\u00f3digo de forma jer\u00e1rquica.</p> <p>La herencia es una caracter\u00edstica clave en la Programaci\u00f3n Orientada a Objetos (POO) que ayuda a mejorar la modularidad y eficiencia del c\u00f3digo en Java.</p>"},{"location":"interfaces/","title":"Interfaces en Java","text":"<p>Las interfaces en Java son un mecanismo que permite definir un contrato que las clases pueden implementar. Proporcionan una forma de especificar m\u00e9todos que deben ser implementados por las clases, sin proporcionar la implementaci\u00f3n de esos m\u00e9todos.</p>"},{"location":"interfaces/#definicion-de-interfaces","title":"Definici\u00f3n de Interfaces","text":"<p>En Java, una interfaz se define utilizando la palabra clave <code>interface</code>. Las interfaces pueden contener m\u00e9todos abstractos (sin implementaci\u00f3n) y constantes.</p>"},{"location":"interfaces/#sintaxis","title":"Sintaxis:","text":"<pre><code>interface MiInterfaz {\n    void metodo1();\n    int metodo2(int parametro);\n}\n</code></pre>"},{"location":"interfaces/#caracteristicas-de-las-interfaces-en-java","title":"Caracter\u00edsticas de las Interfaces en Java","text":"Caracter\u00edsticas Descripci\u00f3n M\u00e9todos Abstractos Los m\u00e9todos en una interfaz son, por defecto, abstractos y p\u00fablicos. M\u00faltiples Implementaciones Una clase puede implementar m\u00faltiples interfaces, lo que permite simular herencia m\u00faltiple. Constantes Las variables en una interfaz son, por defecto, public, static y final. <p>Cuidado</p> <p>Las interfaces no pueden contener m\u00e9todos con implementaci\u00f3n (a menos que sean m\u00e9todos est\u00e1ticos o m\u00e9todos por defecto, introducidos en Java 8).</p>"},{"location":"interfaces/#ejemplo-de-interfaces-en-java","title":"Ejemplo de Interfaces en Java","text":"<pre><code>interface Animal {\n    void hacerSonido();\n}\n\nclass Perro implements Animal {\n    public void hacerSonido() {\n        System.out.println(\"Guau Guau!\");\n    }\n}\n\nclass Gato implements Animal {\n    public void hacerSonido() {\n        System.out.println(\"Miau Miau!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal miPerro = new Perro();\n        Animal miGato = new Gato();\n\n        miPerro.hacerSonido(); // Salida: Guau Guau!\n        miGato.hacerSonido();  // Salida: Miau Miau!\n    }\n}\n</code></pre>"},{"location":"interfaces/#metodos-por-defecto-en-interfaces","title":"M\u00e9todos por Defecto en Interfaces","text":"<p>Desde Java 8, se pueden definir m\u00e9todos por defecto en las interfaces, lo que permite proporcionar una implementaci\u00f3n predeterminada.</p> <p>Ejemplo:</p> <pre><code>interface Vehiculo {\n    void conducir();\n\n    default void encender() {\n        System.out.println(\"El veh\u00edculo est\u00e1 encendido.\");\n    }\n}\n\nclass Coche implements Vehiculo {\n    public void conducir() {\n        System.out.println(\"Conduciendo el coche.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Coche miCoche = new Coche();\n        miCoche.encender(); // Salida: El veh\u00edculo est\u00e1 encendido.\n        miCoche.conducir(); // Salida: Conduciendo el coche.\n    }\n}\n</code></pre>"},{"location":"interfaces/#beneficios-de-las-interfaces","title":"Beneficios de las Interfaces","text":"<ol> <li>Flexibilidad: Permiten que diferentes clases implementen el mismo conjunto de m\u00e9todos, facilitando la interoperabilidad. </li> <li>Desacoplamiento: Promueven un dise\u00f1o m\u00e1s limpio y modular, separando la definici\u00f3n de m\u00e9todos de su implementaci\u00f3n. </li> <li>M\u00faltiples Herencias: Permiten que una clase implemente m\u00faltiples interfaces, superando la limitaci\u00f3n de la herencia simple.</li> </ol> <p>Las interfaces son una parte fundamental de la Programaci\u00f3n Orientada a Objetos (POO) en Java, permitiendo un dise\u00f1o m\u00e1s flexible y escalable del software.</p>"},{"location":"introduccion/","title":"\u00bfQue es POO?","text":""},{"location":"introduccion/#conceptos-basicos","title":"Conceptos b\u00e1sicos","text":"<p>La programaci\u00f3n orientada a objetos (POO)\u200b es un paradigma de programaci\u00f3n que parte del concepto de \"objetos\" como base, los cuales contienen informaci\u00f3n en forma de campos (a veces tambi\u00e9n referidos como atributos, cualidades o propiedades) y c\u00f3digo en forma de m\u00e9todos.</p> <p>Los objetos son capaces de interactuar y modificar los valores contenidos en sus campos o atributos (estado) a trav\u00e9s de sus m\u00e9todos (comportamiento).</p> <p>Muchos de los objetos predise\u00f1ados de los lenguajes de programaci\u00f3n actuales permiten la agrupaci\u00f3n en bibliotecas o librer\u00edas, sin embargo, muchos de estos lenguajes permiten al usuario la creaci\u00f3n de sus propias bibliotecas.</p> <p>Algunas caracter\u00edsticas clave de la programaci\u00f3n orientada a objetos son herencia, abstracci\u00f3n, polimorfismo y encapsulamiento.</p>"},{"location":"introduccion/#conceptos-fundamentales","title":"Conceptos fundamentales","text":"<p>La POO es una forma de programar que trata de encontrar una soluci\u00f3n problemas. Introduce nuevos conceptos, que superan y ampl\u00edan conceptos antiguos. Entre ellos destacan los siguientes:</p> <ul> <li> <p>Clase: Una clase es una especie de \"plantilla\" en la que se definen los atributos y m\u00e9todos predeterminados de un tipo de objeto. Esta plantilla se crea para poder crear objetos f\u00e1cilmente. Al m\u00e9todo de crear nuevos objetos mediante la lectura y recuperaci\u00f3n de los atributos y m\u00e9todos de una clase se le conoce como instanciaci\u00f3n.</p> </li> <li> <p>Objeto: Instancia de una clase. Entidad provista de un conjunto de propiedades o atributos (datos) y de comportamiento o funcionalidad (m\u00e9todos), los mismos que consecuentemente reaccionan a eventos. Se corresponden con los objetos reales del mundo que nos rodea, o con objetos internos del sistema (del programa). M\u00e9todo Algoritmo asociado a un objeto (o a una clase de objetos), cuya ejecuci\u00f3n se desencadena tras la recepci\u00f3n de un \"mensaje\". Desde el punto de vista del comportamiento, es lo que el objeto puede hacer. Un m\u00e9todo puede producir un cambio en las propiedades del objeto, o la generaci\u00f3n de un \"evento\" con un nuevo mensaje para otro objeto del sistema.</p> </li> <li> <p>Atributos: Caracter\u00edsticas que tiene la clase.</p> </li> </ul>"},{"location":"introduccion/#caracteristicas-de-la-poo","title":"Caracter\u00edsticas de la POO","text":"<p>Existe un acuerdo acerca de qu\u00e9 caracter\u00edsticas contempla la \"orientaci\u00f3n a objetos\". Las caracter\u00edsticas siguientes son las m\u00e1s importantes:</p> <ul> <li>Abstracci\u00f3n: Denota las caracter\u00edsticas esenciales de un objeto, donde se capturan sus comportamientos. Cada objeto en el sistema sirve como modelo de un \"agente\" abstracto que puede realizar trabajo, informar y cambiar su estado, y \"comunicarse\" con otros objetos en el sistema sin revelar \"c\u00f3mo\" se implementan estas caracter\u00edsticas. Los procesos, las funciones o los m\u00e9todos pueden tambi\u00e9n ser abstra\u00eddos, y, cuando lo est\u00e1n, una variedad de t\u00e9cnicas son requeridas para ampliar una abstracci\u00f3n. El proceso de abstracci\u00f3n permite seleccionar las caracter\u00edsticas relevantes dentro de un conjunto e identificar comportamientos comunes para definir nuevos tipos de entidades en el mundo real. La abstracci\u00f3n es clave en el proceso de an\u00e1lisis y dise\u00f1o orientado a objetos, ya que mediante ella podemos llegar a armar un conjunto de clases que permitan modelar la realidad o el problema que se quiere atacar.</li> <li>Encapsulamiento: Significa reunir todos los elementos que pueden considerarse pertenecientes a una misma entidad, al mismo nivel de abstracci\u00f3n. Esto permite aumentar la cohesi\u00f3n (dise\u00f1o estructurado) de los componentes del sistema. Algunos autores confunden este concepto con el principio de ocultaci\u00f3n, principalmente porque se suelen emplear conjuntamente.</li> <li>Polimorfismo: Comportamientos diferentes, asociados a objetos distintos, pueden compartir el mismo nombre; al llamarlos por ese nombre se utilizar\u00e1 el comportamiento correspondiente al objeto que se est\u00e9 usando. O, dicho de otro modo, las referencias y las colecciones de objetos pueden contener objetos de diferentes tipos, y la invocaci\u00f3n de un comportamiento en una referencia producir\u00e1 el comportamiento correcto para el tipo real del objeto referenciado. Cuando esto ocurre en \"tiempo de ejecuci\u00f3n\", esta \u00faltima caracter\u00edstica se llama asignaci\u00f3n tard\u00eda o asignaci\u00f3n din\u00e1mica. Algunos lenguajes proporcionan medios m\u00e1s est\u00e1ticos (en \"tiempo de compilaci\u00f3n\") de polimorfismo, tales como las plantillas y la sobrecarga de operadores de C++.</li> <li>Herencia: Las clases no se encuentran aisladas, sino que se relacionan entre s\u00ed, formando una jerarqu\u00eda de clasificaci\u00f3n. Los objetos heredan las propiedades y el comportamiento de todas las clases a las que pertenecen. La herencia organiza y facilita el polimorfismo y el encapsulamiento, permitiendo a los objetos ser definidos y creados como tipos especializados de objetos preexistentes. Estos pueden compartir (y extender) su comportamiento sin tener que volver a implementarlo. Esto suele hacerse habitualmente agrupando los objetos en clases, y estas en \u00e1rboles o enrejados que reflejan un comportamiento com\u00fan. Cuando un objeto hereda de m\u00e1s de una clase, se dice que hay herencia m\u00faltiple; siendo de alta complejidad t\u00e9cnica por lo cual suele recurrirse a la herencia virtual para evitar la duplicaci\u00f3n de datos.</li> </ul>"},{"location":"metodos/","title":"M\u00e9todos en Java","text":"<p>Los m\u00e9todos en Java representan el comportamiento de una clase. Son bloques de c\u00f3digo que se ejecutan cuando se invocan y pueden recibir par\u00e1metros, devolver valores o ejecutar acciones espec\u00edficas.</p>"},{"location":"metodos/#modificadores-de-acceso","title":"Modificadores de Acceso","text":"<p>Los m\u00e9todos, al igual que los atributos, pueden tener distintos modificadores de acceso.</p> Modificador Descripci\u00f3n <code>public</code> El m\u00e9todo es accesible desde cualquier otra clase. <code>private</code> El m\u00e9todo solo es accesible dentro de la misma clase. <code>protected</code> El m\u00e9todo es accesible dentro de la misma clase, subclases y clases del mismo paquete. (Sin modificador) Package-private, el m\u00e9todo es accesible solo dentro del mismo paquete."},{"location":"metodos/#tipos-de-metodos","title":"Tipos de M\u00e9todos","text":"Tipo Descripci\u00f3n M\u00e9todos con retorno Devuelven un valor especificado con un tipo de dato (ej. <code>int</code>, <code>String</code>, etc.). M\u00e9todos <code>void</code> No devuelven ning\u00fan valor, solo ejecutan acciones. M\u00e9todos est\u00e1ticos Se declaran con <code>static</code> y pertenecen a la clase en lugar de a una instancia. M\u00e9todos de instancia Son espec\u00edficos de cada objeto creado de la clase."},{"location":"metodos/#ejemplo-de-metodos-en-java","title":"Ejemplo de M\u00e9todos en Java","text":"<pre><code>public class Calculadora {\n    // M\u00e9todo con retorno\n    public int sumar(int a, int b) {\n        return a + b;\n    }\n\n    // M\u00e9todo void\n    public void mostrarMensaje() {\n        System.out.println(\"\u00a1Bienvenido a la calculadora!\");\n    }\n}\n</code></pre>"},{"location":"metodos/#metodos-estaticos-vs-metodos-de-instancia","title":"M\u00e9todos Est\u00e1ticos vs M\u00e9todos de Instancia","text":"<pre><code>public class Utilidades {\n    // M\u00e9todo est\u00e1tico\n    public static int multiplicar(int a, int b) {\n        return a * b;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Llamada a un m\u00e9todo est\u00e1tico\n        int resultado = Utilidades.multiplicar(4, 5);\n        System.out.println(\"Resultado: \" + resultado);\n    }\n}\n</code></pre>"},{"location":"metodos/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ul> <li>Usar nombres descriptivos para los m\u00e9todos.</li> <li>Seguir la convenci\u00f3n camelCase (<code>calcularPromedio</code>, <code>obtenerDatos</code>).</li> <li>Evitar m\u00e9todos muy largos, dividi\u00e9ndolos en otros m\u00e1s peque\u00f1os si es necesario.</li> <li>Documentar los m\u00e9todos usando JavaDoc.</li> </ul> <p>Consejo</p> <p>Se dice que un metodo es ideal cuando su c\u00f3digo es facilmente legible y no precisamos de hacer scroll para ver todo el c\u00f3digo que contiene.</p>"}]}